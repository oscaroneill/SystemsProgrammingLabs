CS2015 Lab 7 : Huffman Coder/Decoder and Files

Thursday 15th November 2018

A coder/decoder (codec) is a piece of software that can encode
or decode a stream of data. The goal of this lab is to construct
a codec that can compress plain text files using Huffman coding,
and decode compressed files back to plain text.

In lab 6 you constructed a program that computes Huffman codes for
each of the 256 characters based on the frequency of each character in
a given "training" file. In the current lab you will extend this
program to a Huffman codec using the codes computed from your code in
lab 6.

For lab 7 you should put the code for you functions into the following
C files:
https://www.scss.tcd.ie/David.Gregg/cs2014/labs/student-huff.zip

It should be possible to invoke your program in three ways:
huff showcodes <training filename>
huff encode <training filename> <input filename> <output filename>
huff decode <training filename> <input filename> <output filename>

The training file is used to provide character frequency information
that can be used to build the Huffman tree. When your program is
invoked with the command-line parameter "showcodes", your program
should write out the Huffman code for each C character.
When your program is invoked with the command-line parameter "encode"
the input file is a plain text file, and the program should output an
encoded file. When your program is invoked with the command-line
parameter "decode" the input file is a Huffman coded file, and the
program should output the corresponding plain text file.

Note that Huffman encoding involves taking a character set with
fixed-length codes (the C character set) and generating a file
where different characters have different lengths. It will therefore
be necessary to pack individual bits into bytes, and the boundary
of any character in the Huffman coded file will only coincide with
a byte boundary by chance.

In order to deal with this problem, construct an abstract datatype
that represents a file that allows a single bit to be read from or
written to the file. The C programming language does not allow reads
or writes of less than one byte, and therefore you will need to create
a buffer that temporarily stores individual bits that will have
recently been read from the C file but not yet used, or recently
written to the abstract data type file, but have not yet been flushed
to the C file.

HINT: Reading and writing bytes from files is much simpler if you use
the following functions from the C standard library:
    int fputc(int c, FILE * file); // writes a single byte to file
    int fgetc (FILE * file);       // reads a single byte from a file
    

Note that when Huffman encoding, you need some way to indicate the end
of the file. The ASCII standard provides an "end of transmission"
(EOT) character, which as ASCII value 4. You can use this character
(suitably encoded with Huffman coding) to mark the end of your huffman
code file.

For testing the code we will be using the following file:
https://www.cs.tcd.ie/David.Gregg/cs2014/labs/modern-prometheus-unix.txt

Submission of this lab will be via the submitty system, which will
be available soon.
